// Mocks generated by Mockito 5.4.6 from annotations
// in bc_golden_plugin/test/src/testkit/golden_testing_tools_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i5;

import 'package:bc_golden_plugin/src/capture/golden_screenshot.dart' as _i4;
import 'package:bc_golden_plugin/src/config/golden_flow_config.dart' as _i7;
import 'package:flutter/material.dart' as _i2;
import 'package:flutter/rendering.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeElement_0 extends _i1.SmartFake implements _i2.Element {
  _FakeElement_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_1 extends _i1.SmartFake
    implements _i2.DiagnosticsNode {
  _FakeDiagnosticsNode_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [GoldenScreenshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoldenScreenshot extends _i1.Mock implements _i4.GoldenScreenshot {
  @override
  List<_i5.Uint8List> get screenshots => (super.noSuchMethod(
        Invocation.getter(#screenshots),
        returnValue: <_i5.Uint8List>[],
        returnValueForMissingStub: <_i5.Uint8List>[],
      ) as List<_i5.Uint8List>);

  @override
  void add(_i5.Uint8List? screenshot) => super.noSuchMethod(
        Invocation.method(
          #add,
          [screenshot],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addAll(Iterable<_i5.Uint8List>? screenshots) => super.noSuchMethod(
        Invocation.method(
          #addAll,
          [screenshots],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i5.Uint8List> captureScreenshot() => (super.noSuchMethod(
        Invocation.method(
          #captureScreenshot,
          [],
        ),
        returnValue: _i6.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i6.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i6.Future<_i5.Uint8List>);

  @override
  _i6.Future<_i5.Uint8List> combineScreenshots(
    _i7.GoldenFlowConfig? config,
    List<String>? stepNames,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #combineScreenshots,
          [
            config,
            stepNames,
          ],
        ),
        returnValue: _i6.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i6.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i6.Future<_i5.Uint8List>);
}

/// A class which mocks [Widget].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockWidget extends _i1.Mock implements _i2.Widget {
  @override
  _i2.Element createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeElement_0(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeElement_0(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i2.Element);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = ', ',
    _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = '',
    String? prefixOtherLines,
    _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.debug,
    int? wrapWidth = 65,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
            #wrapWidth: wrapWidth,
          },
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
              #wrapWidth: wrapWidth,
            },
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
              #wrapWidth: wrapWidth,
            },
          ),
        ),
      ) as String);

  @override
  _i2.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_1(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_1(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i2.DiagnosticsNode);

  @override
  List<_i2.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i2.DiagnosticsNode>[],
        returnValueForMissingStub: <_i2.DiagnosticsNode>[],
      ) as List<_i2.DiagnosticsNode>);

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}
